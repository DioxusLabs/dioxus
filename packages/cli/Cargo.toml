[package]
name = "dioxus-cli"
version = { workspace = true }
authors = ["Jonathan Kelley"]
edition = "2021"
description = "CLI tool for developing, testing, and publishing Dioxus apps"
repository = "https://github.com/DioxusLabs/dioxus/"
license = "MIT OR Apache-2.0"
keywords = ["react", "gui", "cli", "dioxus", "wasm"]
rust-version = "1.79.0"

[dependencies]
# cli core
clap = { version = "4.2", features = ["derive", "cargo"] }
thiserror = { workspace = true }
wasm-bindgen-cli-support = "0.2"
wasm-bindgen-shared = "0.2"
colored = "2.0.0"
dioxus-cli-config = { workspace = true, features = ["cli"], default-features = false }

# features
log = "0.4.14"
fern = { version = "0.6.0", features = ["colored"] }
serde = { version = "1.0.136", features = ["derive"] }
serde_json = "1.0.79"
toml = { workspace = true }
fs_extra = "1.2.0"
cargo_toml = { workspace = true }
futures-util = { workspace = true, features = ["async-await-macro"] }
notify = { workspace = true, features = ["serde"] }
html_parser = { workspace = true }
cargo_metadata = "0.18.1"
tokio = { version = "1.16.1", features = ["fs", "sync", "rt", "macros", "process", "rt-multi-thread"] }
tokio-stream = "0.1.15"
atty = "0.2.14"
chrono = "0.4.19"
anyhow = "1"
hyper = { workspace = true }
hyper-util = "0.1.3"
hyper-rustls = { workspace = true }
rustls = { workspace = true }
subprocess = "0.2.9"
rayon = "1.8.0"
console = "0.15.8"
ctrlc = "3.2.3"
futures-channel = { workspace = true }
krates = { version = "0.17.0" }

axum = { workspace = true, features = ["ws"] }
axum-server = { workspace = true, features = ["tls-rustls"] }
axum-extra = { workspace = true, features = ["typed-header"] }
tower-http = { workspace = true, features = ["full"] }
proc-macro2 = { workspace = true, features = ["span-locations"] }
syn = { workspace = true, features = ["full", "extra-traits", "visit", "visit-mut"] }

headers = "0.3.7"
walkdir = "2"

# tools download
dirs = { workspace = true }
reqwest = { workspace = true, features = [
    "rustls-tls",
    "stream",
    "trust-dns",
    "blocking",
] }
flate2 = "1.0.22"
tar = "0.4.38"
zip = "0.6.2"
tower = { workspace = true }
once_cell = "1.19.0"

# plugin packages
open = "5.0.1"
cargo-generate = "=0.21.3"
toml_edit = "0.22.20"

# bundling
tauri-bundler = { workspace = true }

# formatting
# syn = { workspace = true }
prettyplease = { workspace = true }

# Assets
manganis-cli-support = { workspace = true, features = ["html"] }
brotli = "6.0.0"

dioxus-autofmt = { workspace = true }
dioxus-check = { workspace = true }
rsx-rosetta = { workspace = true }
dioxus-rsx = { workspace = true, features = ["serde"]}
dioxus-html = { workspace = true, features = ["hot-reload-context"] }
dioxus-core = { workspace = true, features = ["serialize"] }
dioxus-hot-reload = { workspace = true, features = ["serve"] }
ignore = "0.4.22"
env_logger = "0.11.3"

tracing-subscriber = { version = "0.3.18", features = ["std", "env-filter"] }
console-subscriber = { version = "0.3.0", optional = true }
tracing = { workspace = true }
wasm-opt = { version = "0.116.1", optional = true }
ratatui = { version = "0.27.0", features = ["crossterm", "unstable"] }
crossterm = { version = "0.27.0", features = ["event-stream"] }
ansi-to-tui = "=5.0.0-rc.1"
ansi-to-html = "0.2.1"

# on macos, we need to specify the vendored feature on ssl when cross compiling
# [target.'cfg(target_os = "macos")'.dependencies]
# openssl = { version = "0.10", features = ["vendored"] }

[build-dependencies]
built = { version = "=0.7.4", features = ["git2"] }

[features]
default = []
plugin = []
tokio-console = ["dep:console-subscriber"]

# when releasing dioxus, we want to enable wasm-opt
wasm-opt = ["dep:wasm-opt"]

[[bin]]
path = "src/main.rs"
name = "dx"

[dev-dependencies]
tempfile = "3.3"

[package.metadata.binstall]
# temporarily, we're going to use the 0.5.0 download page for all binaries
pkg-url = "{ repo }/releases/download/v{ version }/dx-{ target }-v{ version }{ archive-suffix }"

# the old one...
# pkg-url = "{ repo }/releases/download/v0.5.0/dx-{ target }-v{ version }{ archive-suffix }"

# pkg-url = "{ repo }/releases/download/v{ version }/dx-{ target }{ archive-suffix }"
pkg-fmt = "tgz"

[package.metadata.binstall.overrides.x86_64-pc-windows-msvc]
pkg-fmt = "zip"
